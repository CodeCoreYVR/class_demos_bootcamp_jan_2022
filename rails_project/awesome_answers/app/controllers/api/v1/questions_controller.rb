# module Api
#     module V1
#         class QuestionController < Api::ApplicationController
#         end
#     end
# end
# üëÜüèª is like this üëáüèª
class Api::V1::QuestionsController < Api::ApplicationController
    # this controller is generated by rails g controller api/v1/questions --no-assets --no-helper --skip-template-engine
    # also remember to change the parent class => Api::ApplicationController
    
    before_action :find_question, only: [:show, :update, :destroy]
    before_action :authenticate_user!, except: [:index, :show]

    def create
        # when user send a request generate a new question
        # response failed or success
        question = Question.new(question_params)
        question.user = current_user
        if question.save
          render json: { id: question.id }
        else
          render(
              json: { errors: question.errors.messages },
              status: 422 #unprocessable entity HTTP Status code
          )
        end
    end

    def index
        # curl http://localhost:3000/api/v1/questions #üëàüèª on terminal
        # or
        # http://localhost:3000/api/v1/questions # üëàüèª on browser

        # return all the questions in json format
        questions = Question.order(created_at: :desc)
        render(json: questions, each_serializer: QuestionCollectionSerializer)
        # we will provide 'each_serializer' named argument to the option hash of the render method that tells which serializer to use with each instance
    end

    def show
        # return a single question in json format
        render(json: @question)
    end

    
    def update
        # based on the id of the user request, update that question with the given params
        if @question.update(question_params)
            render json: {id: @question.id }
        else
            render(
                json: { errors: @question.errors.messages },
                status: 422
            )
        end
    end

    def destroy
        # based on the id of the user request, delete that question
        if @question.destroy
            #head :ok
            render( json: { status:200 } )
        else
            #head :bad_request
            render( json: { status:500 } )
        end
    end

    private

    def question_params
        params.require(:question).permit(:title, :body)
    end

    def find_question
        @question = Question.find(params[:id])
    end
end
