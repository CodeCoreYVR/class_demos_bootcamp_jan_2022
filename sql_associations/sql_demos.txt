### Connect to the db:
-> Run psql -d sql_lab
-> Run \d while connected to a database to see all of the information about the database
-> Run \d [table_name] to see information about a table

---STUDENT PROJECTS----
SELECT title FROM projects WHERE student_id = 2;

----COURSE SCORES----
SELECT score, student_id FROM enrolments WHERE course_id = 1;

> CROSS JOIN:

SELECT first_name,phone_number, title FROM students CROSS JOIN projects;

> INNER JOIN (SOMETIMES JUST CALLED JOIN)
ADDS THE CLAUSE "ON":
SELECT * FROM students 
INNER JOIN projects 
ON students.id = projects.student_id;

----FIRST JOIN-----

SELECT students.id, students.first_name, projects.title 
FROM students 
INNER JOIN projects 
ON students.id = projects.student_id 
ORDER BY students.first_name;

----WHAT PROJECTS?----

SELECT students.id, students.first_name, projects.title 
FROM students
INNER JOIN projects
ON students.id = projects.student_id
ORDER BY projects.title;

----RETRIEVE NEW COLUMN WITH COUNT OF PROJECTS-----
SELECT students.id, students.first_name, count(projects.title) AS projects_count
FROM students
INNER JOIN projects
ON students.id = projects.student_id
GROUP BY students.id
ORDER BY projects_count DESC;

> MULTIPLE TABLE JOIN

----STUDENTS FROM COURSES-------

SELECT students.id, students.first_name, courses.title
FROM students
JOIN enrolments ON students.id = enrolments.student_id
JOIN courses ON enrolments.course_id = courses.id
WHERE courses.title ILIKE '%hybrid matrix%';

----CLASSES WITH RE*--------

SELECT students.first_name, courses.title, enrolments.score
FROM enrolments
JOIN students ON enrolments.student_id = students.id
JOIN courses ON enrolments.course_id = courses.id
WHERE students.first_name LIKE 'Re%';

> FULL OUTER JOIN
SELECT * FROM students
FULL OUTER JOIN projects
ON students.id = projects.student_id;

> LEFT JOIN
SELECT * FROM students
LEFT JOIN projects
ON students.id = projects.student_id;

Above will first do CROSS JOIN, the INNER JOIN, then
add unjoined rows for students table

> RIGHT JOIN
SELECT * FROM students
RIGHT JOIN projects
ON students.id = projects.student_id;

Above will first do CROSS JOIN, the INNER JOIN, then
add unjoined rows for projects table

-----STUDENTS AND PROJECTS------

SELECT students.id, students.first_name, projects.title AS project_title
FROM students LEFT JOIN projects 
ON students.id = projects.student_id;

----WITHOUT PROJECT----

SELECT students.id, students.first_name, projects.title AS project_title
FROM students LEFT JOIN projects
ON students.id = projects.student_id
WHERE projects.title IS NULL;

> GROUP BY

------GROUP BY AGES------

SELECT ARRAY_AGG(first_name), age, COUNT(*) AS age_count 
FROM students
GROUP BY age
ORDER BY age_count DESC;

-----AVERAGE SCORE OF COURSES-----

SELECT courses.title, AVG(enrolments.score) AS average_score
FROM courses
INNER JOIN enrolements
ON courses.id = enrolments.course_id
GROUP BY courses.title
ORDER BY average_score DESC;

-----LAST REGISTERED--------

SELECT courses.id, courses.title, MAX(enrolments.created_at) AS recent
FROM courses
INNER JOIN enrolments ON courses.id = enrolments.course_id
GROUP BY courses.id
ORDER BY recent DESC;

>SUB-QUERY

----NO. OF ENROLED STUDENTS-------

SELECT *
FROM (SELECT courses.title, COUNT(*) AS student_count
    FROM courses
    INNER JOIN enrolments
    ON courses.id = enrolments.course_id
    GROUP BY courses.id
    ORDER BY student_count DESC
) AS results
WHERE student_count >= 5;

----FAILING CLASSES-------

SELECT *
FROM (
    SELECT courses.id, courses.title, ROUND(AVG(enrolments.score),2) AS score_average,
    COUNT(*) AS student_count
    FROM courses
    INNER JOIN enrolments ON enrolments.course_id = courses.id
    GROUP BY courses.id
)
AS courses_with_stats
WHERE score_average < 60
ORDER BY score_average DESC;

> IN

SELECT id, first_name, last_name
FROM students
WHERE id IN (2, 5, 363, 500, 1000);

> CONSTRAINTS

----CAR TABLE EXAMPLE----
----NO NULL CONSTRAINT----

CREATE TABLE cars (
    make VARCHAR(50) CONSTRAINT must_exist NOT NULL,
    model VARCHAR(50) CONSTRAINT must_exist NOT NULL
);

----make sure all students must have a unique email-----
---UNIQUE CONSTRAINT----
ALTER TABLE students
ADD CONSTRAINT unique_email
UNIQUE (email);

----TO ADD UNIQUE CONSTRAINT TO EXISTING CARS TABLE, MODEL COLUMN-----
ALTER TABLE cars
ADD CONSTRAINT unique model
UNIQUE(model);
